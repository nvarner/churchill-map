image: docker:20

variables:
  SAST_EXCLUDED_ANALYZERS: "nodejs-scan, semgrep"
  DOCKER_TLS_CERTDIR: "/certs"

services:
  - docker:20-dind

include:
  - template: Security/SAST.gitlab-ci.yml

stages:
  - build_image
  - mark_image
  - build
  - check
  - deploy

# build_image stage
build_image:
  stage: build_image
  needs: []
  script:
    - 'echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin'
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

# mark_image stage
mark_latest:
  stage: mark_image
  needs: [build_image]
  variables:
    GIT_STRATEGY: none
  only:
    - master
  script:
    - 'echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin'
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest

# build stage
build:
  stage: build
  needs: [build_image]
  variables:
    GIT_STRATEGY: none
  script:
    - 'echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin'
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - id=$(docker run -d --rm $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA tail -f /dev/null)
    - docker exec $id npm run build
    - docker cp $id:/usr/src/map/dist dist
    - docker stop $id -t 1
  artifacts:
    paths:
      - dist/

doc:
  stage: build
  needs: [build_image]
  variables:
    GIT_STRATEGY: none
  script:
    - 'echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin'
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - id=$(docker run -d --rm $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA tail -f /dev/null)
    - docker exec $id npm run doc
    - docker cp $id:/usr/src/map/docs docs
    - docker stop $id -t 1
  artifacts:
    paths:
      - docs/

code_navigation:
  stage: build
  needs: [build_image]
  allow_failure: true
  variables:
    GIT_STRATEGY: none
  script:
    - 'echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin'
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - id=$(docker run -d --rm $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA tail -f /dev/null)
    - docker exec $id npm run gen-code-nav
    - docker cp $id:/usr/src/map/dump.lsif dump.lsif
    - docker stop $id -t 1
  artifacts:
    reports:
      lsif: dump.lsif

# Check stage
lint:
  stage: check
  needs: [build_image]
  variables:
    GIT_STRATEGY: none
  script:
    - 'echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin'
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker run $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA npm run lint

sast:
  stage: check
  needs: []
  variables:
    SAST_EXCLUDED_PATHS: src/test

test:
  stage: check
  needs: [build_image]
  variables:
    GIT_STRATEGY: none
  script:
    - 'echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin'
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - id=$(docker run -d --rm $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA tail -f /dev/null)
    - docker exec $id npm run test-ci
    - docker cp $id:/usr/src/map/junit.xml junit.xml
    - docker cp $id:/usr/src/map/coverage/ coverage/
    - docker stop $id -t 1
  artifacts:
    when: always
    paths:
      - junit.xml
      - coverage/cobertura-coverage.xml
    reports:
      junit: junit.xml
      cobertura: coverage/cobertura-coverage.xml

# Deploy stage
deploy-app:
  stage: deploy
  image: buildpack-deps:21.04
  variables:
    GIT_STRATEGY: none
  script:
  - apt update -qq && apt install -y -qq lftp
  - lftp -e "set ssl:verify-certificate no; mirror -R dist ." -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST 
  artifacts:
    paths:
      - dist
  only:
    - master

# deploy docs (called pages so docs end up on GitLab Pages)
pages:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  script:
    - mv docs/ public/
  artifacts:
    paths:
      - public/
  only:
    - master
